# https://taskfile.dev
# A modern replacement of Makefile
version: '3'

vars:
  GIT_REPO:
    sh: git config --get remote.origin.url | sed -e 's#^.*:##' -e 's#.git$##' -e 's#//github.com/*##'
  GIT_REPO_LATEST_RELEASE:
    sh: curl -s "https://api.github.com/repos/{{.GIT_REPO}}/releases/latest" | grep tag_name | cut -d '"' -f4
  GIT_REPO_HTTP_URL:
    sh: echo "https://github.com/$(git config --get remote.origin.url | sed -e 's#^.*:##' -e 's#.git$##' | sed -e 's#//github.com/*##')"
  GIT_SHORT_SHA:
    sh: git rev-parse --short HEAD
  DOCKER_IMAGE_NAME: '{{.GIT_REPO}}'
  DOCKER_IMAGE: '{{.DOCKER_IMAGE_NAME}}:{{.GIT_SHORT_SHA}}'
  REPO_ABS_ROOT_PATH:
    sh: git rev-parse --show-toplevel
  RELATIVE_PATH_TO_ROOT:
    sh: |
      realpath --relative-to="$(pwd)" "{{.REPO_ABS_ROOT_PATH}}"
  TASK_VERSION:
    sh: cat {{.RELATIVE_PATH_TO_ROOT}}/.tool-versions | grep -w task | cut -d ' ' -f2

silent: true

tasks:
  default:
    cmds:
    - echo "ðŸ“’ {{.TASK}}"
    - task --list

  debug:
    desc: Run all debug tasks
    cmds:
    - echo "ðŸ“’ {{.TASK}}"
    - task: debug:resolve_vars

  debug:resolve_vars:
    desc: Output few things which can help debugging
    cmds:
    - echo "ðŸ“’ {{.TASK}}"
    - echo "Absolute path":"                     {{.REPO_ABS_ROOT_PATH}}"
    - echo "Relative path":"                     {{.RELATIVE_PATH_TO_ROOT}}"
    - echo "Git Repository":"                    {{.GIT_REPO}}"
    - echo "Git Repository latest release":"     {{.GIT_REPO_LATEST_RELEASE}}"
    - echo "image":"                             {{.DOCKER_IMAGE}}"
    - echo "Task version":"                      {{.TASK_VERSION}}"

  build:
    desc: Build Docker image
    deps: [lint]
    cmds:
    - echo "ðŸ“’ {{.TASK}}"
    - |
      docker build --pull \
        --file "Dockerfile" \
        --tag "{{.DOCKER_IMAGE}}" \
        .
      echo "ðŸ“¦ Image built"
    env:
      DOCKER_BUILDKIT: 1
    sources:
    - Dockerfile
    method: checksum

  tests:
    desc: Run Project Test Suit (including Docker container tests)
    deps: [build]
    cmds:
    - echo "ðŸ“’ {{.TASK}}"
    - |
      export IMAGE="{{.DOCKER_IMAGE}}"
      {{.RELATIVE_PATH_TO_ROOT}}/tests/libs/bats-core/bin/bats {{.RELATIVE_PATH_TO_ROOT}}/tests/docker.bats
      echo -e "ðŸ“¦ Image validated\n"

  dependencies:
    desc: Install dependencies
    run: once
    cmds:
    - echo "ðŸ“’ {{.TASK}}"
    - plugin_name="httpie-go"; asdf plugin add "${plugin_name}" || true; asdf install "${plugin_name}" $(asdf current "${plugin_name}" | tr -s ' ' | cut -d' ' -f2);

  security:
    desc: Run all security scanners
    run: once
    deps: [dependencies]
    cmds:
    - echo "ðŸ“’ {{.TASK}}"
    - |
      if [[ "{{.CLI_ARGS}}" == *"sarif"* ]]; then mkdir -p sarif-reports; fi
      task security:image:snyk
      task security:image:trivy
      echo -e "âœ… You're safe\n"

  security:image:snyk:
    desc: Run Snyk tests
    deps: [build]
    cmds:
    - echo "ðŸ“’ {{.TASK}}"
    - plugin_name="snyk"; asdf plugin add "${plugin_name}" || true; asdf install "${plugin_name}" $(asdf current "${plugin_name}" | tr -s ' ' | cut -d' ' -f2)
    - snyk auth "${SNYK_TOKEN}"; snyk container test {{.DOCKER_IMAGE}} --exclude-base-image-vulns --exclude-app-vulns --file=Dockerfile --sarif-file-output={{.RELATIVE_PATH_TO_ROOT}}/sarif-reports/snyk-report.sarif
    # ignore_error: true  # needed as we could reach the free tier limit

  security:image:trivy:
    desc: Run Aquasecurity Trivy (vulnerability scanner for container images)
    deps: [build]
    cmds:
    - echo "ðŸ“’ {{.TASK}}"
    - plugin_name="trivy"; asdf plugin add "${plugin_name}" || true; asdf install "${plugin_name}" $(asdf current "${plugin_name}" | tr -s ' ' | cut -d' ' -f2)
    - trivy image --ignorefile {{.RELATIVE_PATH_TO_ROOT}}/.security/cis-cve-ignore --format table {{.DOCKER_IMAGE}}
    # If task is called passing the arg sarif ('task <task name> -- sarif'), then a sarif report is created.
    # We use httpie-go as a common tool to download or call APIs (much more convenient than the outdated curl)
    - |
      if [[ "{{.CLI_ARGS}}" == *"sarif"* ]]; then
        ht --print=B --output "/tmp/trivy-sarif.tpl" --download "https://raw.github.com/aquasecurity/trivy/v0.22.0/contrib/sarif.tpl"
        trivy image --ignorefile {{.RELATIVE_PATH_TO_ROOT}}/.security/cis-cve-ignore --exit-code 1 --format template --template @/tmp/trivy-sarif.tpl -o {{.RELATIVE_PATH_TO_ROOT}}/sarif-reports/trivy-report.sarif {{.DOCKER_IMAGE}}
        # trivy image --ignorefile {{.RELATIVE_PATH_TO_ROOT}}/.security/cis-cve-ignore --exit-code 1 --format sarif -o {{.RELATIVE_PATH_TO_ROOT}}/sarif-reports/trivy-report.sarif {{.DOCKER_IMAGE}}
        # ^^ released soon
      fi

  lint:
    desc: Run all linters
    run: once
    deps: [dependencies]
    cmds:
    - echo "ðŸ“’ {{.TASK}}"
    - if [[ "${GITHUB_ACTIONS}" == 'true' ]]; then task lint:dockerfile:hadolint; fi

  lint:dockerfile:hadolint:
    desc: Lint Dockerfile
    cmds:
    - echo "ðŸ“’ {{.TASK}}"
    - plugin_name="hadolint"; asdf plugin add "${plugin_name}" https://github.com/crazy-matt/asdf-hadolint.git || true; asdf install "${plugin_name}" $(asdf current "${plugin_name}" | tr -s ' ' | cut -d' ' -f2)
    # - plugin_name="hadolint"; asdf plugin add "${plugin_name}" || true; asdf install "${plugin_name}" $(asdf current "${plugin_name}" | tr -s ' ' | cut -d' ' -f2)
    # ^^ Waiting for the asdf hadolint plugin's owner to accept the PR #5
    - hadolint --config {{.RELATIVE_PATH_TO_ROOT}}/.linters/hadolint.yml --format tty Dockerfile
