name: 'Releaser'

on:
  pull_request:
    types: [closed]
    branches:
      - 'main'

jobs:
  release:
    name: 'Releaser'
    if: |
      github.event.pull_request.merged == true &&
      contains(github.event.pull_request.labels.*.name, 'chore') == false &&
      contains(github.event.pull_request.labels.*.name, 'skip-release') == false
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 1
          ref: ${{ github.base_ref }}
          submodules: 'true'
      - name: 'Set Job Vars'
        id: vars
        run: |
          echo "task_version=$(cat ${{ github.workspace }}/.tool-versions | grep -w task | cut -d ' ' -f2)" >> $GITHUB_OUTPUT
      - name: 'Install asdf dependencies'
        uses: asdf-vm/actions/setup@v1
      - name: 'Install Task'
        uses: arduino/setup-task@v1
        with:
          version: ${{ steps.vars.outputs.task_version }}
      - name: 'Run tests'
        id: tests
        run: |
          set -e
          task docker:tests
      - name: 'Gather the PR merge commit message'
        id: merge_commit
        run: |
          pr_extended_description="$(git log -1 --no-color --pretty=%B | grep -v "^$(git show -s --format=%s)" | grep '\S')" || pr_extended_description=""
          pr_extended_description="${pr_extended_description//'%'/'%25'}" # Escape some special chars in the GHA fashion style
          pr_extended_description="${pr_extended_description//$'\n'/'%0A'}"
          pr_extended_description="${pr_extended_description//$'\r'/'%0D'}"
          echo "extended_description=$pr_extended_description" >> $GITHUB_OUTPUT
      - name: 'Publish'
        id: publisher
        uses: release-drafter/release-drafter@v5.18.1
        with:
          config-name: releaser_config.yml
          disable-autolabeler: true
          publish: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: 'Update Release Note'
        run: |
          sudo apt-get install hub
          pip3 install j2cli
          set -e
          current_release_body="$(hub release show -f '%b' "${RELEASE_TAG_NAME}")"
          new_release_body="$(j2 <(echo "${current_release_body}"))"
          payload="$(jq -n "{\"body\" : \"${new_release_body}\"}")"
          curl -s --fail \
            -X PATCH \
            -H "Accept: application/vnd.github.v3+json" \
            -H "Authorization: token ${GITHUB_TOKEN}" \
            "https://api.github.com/repos/${GITHUB_REPOSITORY}/releases/${RELEASE_ID}" \
            -d "${payload}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          RELEASE_ID: ${{ steps.publisher.outputs.id }}
          RELEASE_TAG_NAME: ${{ steps.publisher.outputs.tag_name }}
          SQUASHED_EXTENDED_DESCRIPTION: ${{ steps.merge_commit.outputs.extended_description }}
      - name: 'Notify about the build'
        if: steps.publisher.outputs.tag_name != ''
        uses: peter-evans/repository-dispatch@v1.1.3
        with:
          token: ${{ secrets.CI_GH_PAT_REPO_DISPATCH_API_AUTH }}
          event-type: slack-notification
          client-payload: '{ "type": "build", "ref": "${{ github.ref }}", "sha": "${{ github.sha }}", "color": "#2EB67D", "title": "ðŸš€ ${{ github.repository }} New Release", "message": "Check-out ${{ steps.publisher.outputs.html_url }}" }'
      - name: 'Raise awareness about this build'
        if: steps.publisher.outputs.tag_name != '' && contains(github.event.pull_request.labels.*.name, 'awareness') == true
        uses: peter-evans/repository-dispatch@v1.1.3
        with:
          token: ${{ secrets.CI_GH_PAT_REPO_DISPATCH_API_AUTH }}
          event-type: slack-notification
          client-payload: '{ "type": "awareness", "ref": "${{ github.ref }}", "sha": "${{ github.sha }}", "color": "#2EB67D", "title": "ðŸš€ ${{ github.repository }} New Release", "message": "This release might be of interest for you. Check-out ${{ steps.publisher.outputs.html_url }}" }'
